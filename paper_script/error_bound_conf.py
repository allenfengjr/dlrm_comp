# Constants
TIGHTEN_EB_TABLES = {2, 3, 9, 11, 15, 20, 23, 25}
LOOSEN_EB_TABLES = {8, 16, 19, 21, 22, 24}
TIGHTEN_EB_VALUE = 0.01
LOOSEN_EB_VALUE = 0.05
BASE_ERROR_BOUND = 0.03
NUM_TABLES = 26
NUM_ITERATIONS = 24

# Generate EB list
EB = [[0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.1, 0.09375, 0.0875, 0.08125, 0.075, 0.06875, 0.0625, 0.05625, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.1, 0.09375, 0.0875, 0.08125, 0.075, 0.06875, 0.0625, 0.05625, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.06, 0.05625, 0.0525, 0.04875, 0.045, 0.04125, 0.0375, 0.03375, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03], 
      [0.1, 0.09375, 0.0875, 0.08125, 0.075, 0.06875, 0.0625, 0.05625, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.1, 0.09375, 0.0875, 0.08125, 0.075, 0.06875, 0.0625, 0.05625, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 
      [0.1, 0.09375, 0.0875, 0.08125, 0.075, 0.06875, 0.0625, 0.05625, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01], 
      [0.1, 0.09375, 0.0875, 0.08125, 0.075, 0.06875, 0.0625, 0.05625, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05], 
      [0.02, 0.01875, 0.0175, 0.01625, 0.015, 0.01375, 0.0125, 0.01125, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]]

for table in range(NUM_TABLES):
    if table in TIGHTEN_EB_TABLES:
        base_eb = TIGHTEN_EB_VALUE
    elif table in LOOSEN_EB_TABLES:
        base_eb = LOOSEN_EB_VALUE
    else:
        base_eb = BASE_ERROR_BOUND

    table_eb = []
    for iter in range(NUM_ITERATIONS):
        if iter < 8:
            # Linear decay/growth from 2x base error bound to base error bound over the first 8 iterations
            eb = (base_eb * 2) - (iter * (base_eb / 8))
        else:
            eb = base_eb
        table_eb.append(round(eb, 5))  # Rounding to 5 decimal places
    EB.append(table_eb)

# Example output for one table to check if the logic is correct
print(EB)
